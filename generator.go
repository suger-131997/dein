package dein

import (
	"bytes"
	"github.com/suger-131997/dein/internal/component"
	"github.com/suger-131997/dein/internal/generator"
	"github.com/suger-131997/dein/internal/symbols"
	"github.com/suger-131997/dein/internal/utils"
	"strings"
	"text/template"
)

// Generator is a dependency injection source code generator.
type Generator struct {
	symbols             *symbols.Symbols
	containerComponents []component.Component
	argumentComponents  []component.Component
	generators          []generator.BodyGenerator
}

// Generate generates a dependency injection source code.
func (g *Generator) Generate(pkgName string) ([]byte, error) {
	var buf bytes.Buffer
	err := template.Must(template.New("").Parse(tmpl)).Execute(&buf, struct {
		PkgName         string
		Imports         func(yield func(string, string) bool)
		ContainerFields func(yield func(string) bool)
		Arguments       func(yield func(string) bool)
		Bodies          func(yield func(string) bool)
	}{
		PkgName: pkgName,
		Imports: g.symbols.Imports(),
		ContainerFields: func(yield func(string) bool) {
			for _, c := range g.containerComponents {
				var b strings.Builder
				b.WriteString(utils.HeadToUpper(g.symbols.VarName(c)))
				b.WriteString(" ")
				if c.IsPointer() {
					b.WriteString("*")
				}
				b.WriteString(g.symbols.PkgName(c.PkgPath()))
				b.WriteString(".")
				b.WriteString(c.Name())
				if !yield(b.String()) {
					break
				}
			}
		},
		Arguments: func(yield func(string) bool) {
			for _, c := range g.argumentComponents {
				var b strings.Builder
				b.WriteString(g.symbols.VarName(c))
				b.WriteString(" ")
				if c.IsPointer() {
					b.WriteString("*")
				}
				b.WriteString(g.symbols.PkgName(c.PkgPath()))
				b.WriteString(".")
				b.WriteString(c.Name())
				if !yield(b.String()) {
					break
				}
			}
		},
		Bodies: func(yield func(string) bool) {
			for _, gen := range g.generators {
				if !yield(gen.Generate()) {
					break
				}
			}
		},
	})
	if err != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

const tmpl = `// Code generated by dein. DO NOT EDIT.
package {{.PkgName}}

import (
{{range $n, $p := .Imports}}
	{{$n}} "{{$p}}"
{{end}}
)

type Container struct {
{{range .ContainerFields -}}
	{{.}}
{{end -}}
}

func NewContainer(
{{range .Arguments -}}
	{{.}},
{{end -}}
) (*Container, error) {
	c := &Container{}

{{range .Bodies -}}
	{{.}}
{{end}}

	return c, nil
}
`
