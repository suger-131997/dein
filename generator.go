package dein

import (
	"bytes"
	"text/template"

	"github.com/suger-131997/dein/internal/generator"
	"github.com/suger-131997/dein/internal/symbols"
)

// Generator is a dependency injection source code generator.
type Generator struct {
	symbols             *symbols.Symbols
	containerGenerators []*generator.ContainerGenerator
	argumentGenerators  []generator.ArgumentGenerator
	generators          []generator.BodyGenerator
}

// Generate generates a dependency injection source code.
func (g *Generator) Generate() ([]byte, error) {
	var buf bytes.Buffer

	err := template.Must(template.New("").Parse(tmpl)).Execute(&buf, struct {
		PkgName          string
		Imports          func(yield func(string, string) bool)
		ContainerFields  func(yield func(string) bool)
		ContainerMethods func(yield func(string) bool)
		Arguments        func(yield func(string) bool)
		Bodies           func(yield func(string) bool)
	}{
		PkgName: g.symbols.DistPkgName(),
		Imports: func(yield func(string, string) bool) {
			for _, im := range g.symbols.Imports() {
				if !yield(im[0], im[1]) {
					break
				}
			}
		},
		ContainerFields: func(yield func(string) bool) {
			for _, gen := range g.containerGenerators {
				if !yield(gen.GenerateField()) {
					break
				}
			}
		},
		ContainerMethods: func(yield func(string) bool) {
			for _, gen := range g.containerGenerators {
				if !yield(gen.GenerateMethod()) {
					break
				}
			}
		},
		Arguments: func(yield func(string) bool) {
			for _, gen := range g.argumentGenerators {
				if !yield(gen.GenerateArgument()) {
					break
				}
			}
		},
		Bodies: func(yield func(string) bool) {
			for _, gen := range g.generators {
				if !yield(gen.GenerateBody()) {
					break
				}
			}
		},
	})
	if err != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

const tmpl = `// Code generated by dein. DO NOT EDIT.
package {{.PkgName}}

import (
{{range $n, $p := .Imports -}}
	{{$n}} "{{$p}}"
{{end}})

type Container struct {
{{range .ContainerFields -}}
	{{.}}
{{end -}}
}

{{range .ContainerMethods -}}
	{{.}}
{{end}}

func NewContainer(
{{range .Arguments -}}
	{{.}},
{{end -}}
) (*Container, error) {
	__c := &Container{}

{{range .Bodies -}}
	{{.}}
{{end}}

	return __c, nil
}
`
