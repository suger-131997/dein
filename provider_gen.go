// Code generated by dein/gen.go. DO NOT EDIT.
package dein

import (
	"github.com/suger-131997/dein/internal/provider"
)

// P0 creates a new constructor provider with a function that takes no arguments and returns a value of type R.
func P0[R any](f func() R) *provider.Provider {
	return provider.NewConstructorProvider(f, false)
}

// P0 creates a new constructor provider with a function that takes no arguments and returns a value of type R or an error.
func PE0[R any](f func() (R, error)) *provider.Provider {
	return provider.NewConstructorProvider(f, true)
}

// P1 creates a new constructor provider with a function that takes 1 arguments and returns a value of type R.
func P1[T0, R any](f func(T0) R) *provider.Provider {
	return provider.NewConstructorProvider(f, false)
}

// P1 creates a new constructor provider with a function that takes 1 arguments and returns a value of type R or an error.
func PE1[T0, R any](f func(T0) (R, error)) *provider.Provider {
	return provider.NewConstructorProvider(f, true)
}

// P2 creates a new constructor provider with a function that takes 2 arguments and returns a value of type R.
func P2[T0, T1, R any](f func(T0, T1) R) *provider.Provider {
	return provider.NewConstructorProvider(f, false)
}

// P2 creates a new constructor provider with a function that takes 2 arguments and returns a value of type R or an error.
func PE2[T0, T1, R any](f func(T0, T1) (R, error)) *provider.Provider {
	return provider.NewConstructorProvider(f, true)
}

// P3 creates a new constructor provider with a function that takes 3 arguments and returns a value of type R.
func P3[T0, T1, T2, R any](f func(T0, T1, T2) R) *provider.Provider {
	return provider.NewConstructorProvider(f, false)
}

// P3 creates a new constructor provider with a function that takes 3 arguments and returns a value of type R or an error.
func PE3[T0, T1, T2, R any](f func(T0, T1, T2) (R, error)) *provider.Provider {
	return provider.NewConstructorProvider(f, true)
}

// P4 creates a new constructor provider with a function that takes 4 arguments and returns a value of type R.
func P4[T0, T1, T2, T3, R any](f func(T0, T1, T2, T3) R) *provider.Provider {
	return provider.NewConstructorProvider(f, false)
}

// P4 creates a new constructor provider with a function that takes 4 arguments and returns a value of type R or an error.
func PE4[T0, T1, T2, T3, R any](f func(T0, T1, T2, T3) (R, error)) *provider.Provider {
	return provider.NewConstructorProvider(f, true)
}
